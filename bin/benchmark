#!/usr/bin/env python

import os
import sys
import subprocess

workloadL = [
	"txworkloada",
	"txworkloadb",
	"txworkloadc",
	# "workloadd",
	# "workloade",
	# "workloadf"
]

typeTr = [
	"TWOPL",
	"OCC",
	"OCCNA",
	"OCCLL"
	"OCCMV",
	"SI",
	"BLOTTER"
]

hostname = sys.argv[1]
port=str(9090)

# Space of key
recordcount = [1000,1000000]

# Number of operaction
operationcount = [10000000]

distribution = 'uniform'

threads = [1,2,4,6,8,16,32,64]

# ycsb_command = ["./bin/ycsb", "load_run", "myhashmap", "-P", "workloads/txworkloada", "-p", "myhashmap.verbose=false", "-p", "measurementtype=timeseries", "-p", "timeseries.granularity=20", "-p", "transaction.type=SI", "-p", "exportfile=/local/cj.gomes/results.csv", "-p", "exporter=com.yahoo.ycsb.measurements.exporter.CSVMeasurementsExporter", "-p", "recordcount=1000", "-p", "operationcount=10000000", "-p", "requestdistribution=uniform", "-p", "threadcount=32", "-p", "maxexecutiontime=40", "-s"]
# ./bin/ycsb load_run myhashmap -P workloads/txworkloada -p myhashmap.verbose=false -p measurementtype=timeseries -p timeseries.granularity=20 -p transaction.type=SI -p exportfile=/local/cj.gomes/results.csv -p exporter=com.yahoo.ycsb.measurements.exporter.CSVMeasurementsExporter -p recordcount=1000 -p operationcount=10000000 -p requestdistribution=uniform -p threadcount=32 -p maxexecutiontime=40 -s

def find_jars(dir, database):
    jars = []
    for (dirpath, dirnames, filenames) in os.walk(dir):
        if dirpath.endswith("conf"):
            jars.append(dirpath)
        for filename in filenames:
            if filename.endswith(".jar") and \
                    (filename.startswith("core") or \
                             filename.startswith(database.split("-")[0]) or \
                             not "binding" in filename):
                jars.append(os.path.join(dirpath, filename))
    return jars

def get_ycsb_home():
    dir = os.path.abspath(os.path.dirname(sys.argv[0]))
    while "CHANGELOG" not in os.listdir(dir):
        dir = os.path.join(dir, os.path.pardir)
    return os.path.abspath(dir)

ycsb_home = get_ycsb_home()



# for i in range(1,7):
for workload in workloadL:
	for no in operationcount:
		for nk in recordcount:
	
			for typeT in typeTr:
				reset_command = ["java", "-cp", os.pathsep.join(find_jars(ycsb_home, 'myhashmap')), \
                         "thrift.ResetDB", typeT, "localhost", port];
                subprocess.call(reset_command)

                load_command = ["./bin/ycsb", "load", "myhashmap", "-P", "workloads/"+str(workload), \
                                "-p", "measurementtype=timeseries", \
                                "-p", "timeseries.granularity=20", "-p", "transaction.type="+str(typeT), \
                                "-p", "exportfile=/local/cj.gomes/result/result_load.csv", \
                                "-p", "exporter=com.yahoo.ycsb.measurements.exporter.CSVMeasurementsExporter", \
                                "-p", "recordcount="+str(nk), "-p", "operationcount="+str(no), \
                                "-p", "db.ip="+hostname, \
                                "-p", "db.port="+port, "-s"]
                subprocess.call(load_command)

                for thread in threads:
					ycsb_command = ["./bin/ycsb", "run", "myhashmap", "-P", "workloads/"+str(workload), \
								"-p", "myhashmap.verbose=false", "-p", "measurementtype=timeseries", \
								"-p", "timeseries.granularity=20", "-p", "transaction.type="+str(typeT), \
								"-p", "exportfile=/local/cj.gomes/result/result_run.csv", \
								"-p", "exporter=com.yahoo.ycsb.measurements.exporter.CSVMeasurementsExporter", \
								"-p", "recordcount="+str(nk), "-p", "operationcount="+str(no), \
								"-p", "requestdistribution="+distribution, \
								"-p", "threadcount="+str(thread), \
								"-p", "maxexecutiontime=60", \
                                "-p", "db.ip="+hostname, \
                                "-p", "db.port="+port, "-s"]
					# print ycsb_command
					subprocess.call(ycsb_command)

